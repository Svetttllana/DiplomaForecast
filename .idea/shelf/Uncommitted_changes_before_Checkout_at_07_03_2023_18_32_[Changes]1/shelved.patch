Index: app/src/main/java/com/example/forecast_diploma/data/WeatherRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.forecast_diploma.data\r\n\r\n\r\nimport android.util.Log\r\nimport com.example.forecast_diploma.di.model.WeatherModel\r\nimport com.example.forecast_diploma.domain.WeatherRepository\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.withContext\r\nimport javax.inject.Inject\r\n\r\nclass WeatherRepositoryImpl @Inject constructor(\r\n    private val apiServise: WeatherApiServise,\r\n\r\n) : WeatherRepository {\r\n\r\n    override suspend fun getListCityWeather(): List<WeatherModel> {\r\n        return withContext(Dispatchers.IO) {\r\n            val response = apiServise.getListCityWeather()\r\n            Log.w(\"Resp repoImpl\", response.body()?.bulkList.toString())\r\n            response.body()?.bulkList?.let {\r\n                it.map {\r\n                    WeatherModel(\r\n                        it.location.name,\r\n                        it.location.region,\r\n                        it.location.country,\r\n                        it.current.temp_c,\r\n                        it.current.condition.text,\r\n                        it.current.condition.icon,\r\n                        it.current.time\r\n                    )\r\n                }\r\n            } ?: kotlin.run {\r\n              emptyList()\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/forecast_diploma/data/WeatherRepositoryImpl.kt b/app/src/main/java/com/example/forecast_diploma/data/WeatherRepositoryImpl.kt
--- a/app/src/main/java/com/example/forecast_diploma/data/WeatherRepositoryImpl.kt	
+++ b/app/src/main/java/com/example/forecast_diploma/data/WeatherRepositoryImpl.kt	
@@ -2,6 +2,8 @@
 
 
 import android.util.Log
+import com.example.forecast_diploma.di.DataModule.Companion.API_KEY
+import com.example.forecast_diploma.di.model.FutureWeatherModel
 import com.example.forecast_diploma.di.model.WeatherModel
 import com.example.forecast_diploma.domain.WeatherRepository
 import kotlinx.coroutines.Dispatchers
@@ -9,29 +11,78 @@
 import javax.inject.Inject
 
 class WeatherRepositoryImpl @Inject constructor(
-    private val apiServise: WeatherApiServise,
-
+    private val apiServise: WeatherApiServise
 ) : WeatherRepository {
 
-    override suspend fun getListCityWeather(): List<WeatherModel> {
+    override suspend fun getCurrentData(): WeatherModel? {
+        Log.w("RESPONSE", "RESPONSE VIZVAN0")
         return withContext(Dispatchers.IO) {
-            val response = apiServise.getListCityWeather()
-            Log.w("Resp repoImpl", response.body()?.bulkList.toString())
-            response.body()?.bulkList?.let {
-                it.map {
-                    WeatherModel(
-                        it.location.name,
-                        it.location.region,
-                        it.location.country,
-                        it.current.temp_c,
-                        it.current.condition.text,
-                        it.current.condition.icon,
-                        it.current.time
+            val response = apiServise.getCurrentWeatherbyCity(API_KEY, "Minsk")
+            Log.w("RESPONSE", response.body().toString())
+            response.body()?.let {
+                WeatherModel(
+                    it.location.name,
+                    it.location.region,
+                    it.location.country,
+                    it.current.temp_c,
+                    it.current.condition.text,
+                    it.current.condition.icon,
+                    it.location.localtime
+
+                )
+            } ?: kotlin.run { null }
+        }
+    }
+
+    override suspend fun getForecastData(): List<FutureWeatherModel> {
+        return withContext(Dispatchers.IO) {
+            val resp = apiServise.getForecastWeatherbyCity(API_KEY, "Minsk", "3")
+            Log.w("getForecastData", resp.body().toString())
+            resp.body()?.forecast?.forecastday?.let {
+                it.map {
+                    FutureWeatherModel(
+                        it.date,
+                        it.day.maxtemp_c,
+                        it.day.mintemp_c,
+                        it.day.condition.text,
+                        it.day.condition.icon,
+                        it.hour[2].temp_c
                     )
                 }
+
             } ?: kotlin.run {
-              emptyList()
+                emptyList()
             }
         }
     }
 }
+
+
+
+
+//val mapped = collection.nestedCollection . map{ outher->
+//    Collection2(
+//        collection.coll,
+//        listOf(NestedCollection2(outher.stringList))
+//
+//    )
+//}
+//log.w("mapped nested",mapped.toString)
+
+
+//override suspend fun getData(): List<ItemsModel> {
+//
+//    return withContext(Dispatchers.IO) {
+//
+//        val response = apiService.getData()
+//        response.body()?.sampleList?.let {
+//            it.map {
+//                ItemsModel(it.description, it.imageUrl)
+//            }
+//        } ?: kotlin.run {
+//            emptyList()
+//        }
+//    }
+//}
+
+
Index: app/src/main/java/com/example/forecast_diploma/domain/WeatherInteractor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.forecast_diploma.domain\r\n\r\nimport android.util.Log\r\nimport com.example.forecast_diploma.di.model.FutureWeatherModel\r\nimport com.example.forecast_diploma.di.model.WeatherModel\r\nimport javax.inject.Inject\r\n\r\nclass WeatherInteractor @Inject constructor(\r\n    private val weatherRepository: WeatherRepository\r\n) {\r\n\r\n\r\n   suspend fun getListWeather():List<WeatherModel> {\r\n       Log.w(\"RESPONSE\",\"RESPONSE VIZVAN iz interactora\")\r\n        return weatherRepository.getListCityWeather()\r\n    }\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/forecast_diploma/domain/WeatherInteractor.kt b/app/src/main/java/com/example/forecast_diploma/domain/WeatherInteractor.kt
--- a/app/src/main/java/com/example/forecast_diploma/domain/WeatherInteractor.kt	
+++ b/app/src/main/java/com/example/forecast_diploma/domain/WeatherInteractor.kt	
@@ -1,7 +1,6 @@
 package com.example.forecast_diploma.domain
 
 import android.util.Log
-import com.example.forecast_diploma.di.model.FutureWeatherModel
 import com.example.forecast_diploma.di.model.WeatherModel
 import javax.inject.Inject
 
Index: app/src/main/java/com/example/forecast_diploma/di/model/FutureWeatherModel.kt
===================================================================
diff --git a/app/src/main/java/com/example/forecast_diploma/di/model/FutureWeatherModel.kt b/app/src/main/java/com/example/forecast_diploma/di/model/FutureWeatherModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/forecast_diploma/di/model/FutureWeatherModel.kt	
+++ /dev/null	
@@ -1,17 +0,0 @@
-package com.example.forecast_diploma.di.model
-
-data class FutureWeatherModel(
-//    val city:String,
-//    val time: Double,
-  //  val condition: String,
-  //  val currentTemperature:String,
-    val date: String,
-    val maxtemp_c:Double,
-    val mintemp_c: Double,
-    val text:String,
-    val icon:String,
-
-    //  val hours:String
-    val temp_c: Double,
-
-)
\ No newline at end of file
